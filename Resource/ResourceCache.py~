#ResourceCache.py


from .. import Log

import os, importlib, inspect

class ResourceCache():
    gResourceCache = None
    def __init__(self):
        if (ResourceCache.gResourceCache == None):
            ResourceCache.gResourceCache = self
        self._resources = None
        self._loaders = None

    def Initialize(self):
        #This method doesn't do much
        Log.LogMessage("Initializing ResourceCache")

        #yay! This method actually does something
        self._resources = dict()
        self._loaders = dict()
        self.LoadLoaders()

        return True

    def LoadLoaders(self):
        #This goes through the current directory and loads the all modules with
        #'loader' in the name. It then cycles through everything contained within
        #that module and if it's has a __class__ field, then it creates it,
        #grabs its extension, and adds it to self._loaders
        currentPath = os.path.dirname(os.path.abspath(__file__))
        files = os.listdir(currentPath)
        for fyle in files:
            filename, extension = os.path.splitext(fyle)
            if (extension == '.py') and \
               (filename.lower().find("loader") != -1) \
               and (filename.lower().find("#") == -1):
                loaderModule = importlib.import_module('.' + filename,
                                                       __package__)

                classes = inspect.getmembers(loaderModule, inspect.isclass)
                for (kname, item) in classes:
                    if (issubclass(item, Loader)):
                        loader = item()
                        exts = loader.GetExtension()
                        for ext in exts:
                            self._loaders[ext] = loader

    def GetLoader(self, extension):
        if extension in self._loaders:
            return self._loaders[extension]
        else:
            Log.LogError("Can't find " + extension + " Loader!")
        return None
    
    def GetResource(self, name):
        if name in self._resources:
            return self._resources[name]
        else:
            Log.LogError("Attempting to access resource: " + name + " hasn't been loaded yet!")
            return None
    def SetResourceFolder(self, AbsolutePath):
        files = None
        try:
            files = os.listdir(AbsolutePath)

            """If this logged, then we didn't cause an error with the
above line"""            
            self.LoadFiles(files, AbsolutePath)
        except:
            Log.LogError("Error loading files in: " + AbsolutePath)

    def LoadFiles(self, mainFolder, path):
        #This method calls its helper, empty a blank current path
        self.LoadFilesb(mainFolder, path, "")

    def LoadFilesb(self, folder, currentPath, currentName):
        """This method recursively goes through all the entries in the
given folder and calls the appropriate load method and loads it into memory"""
        for fyle in folder:
            Log.LogMessage("Current file being loaded = " + str(fyle))
            filepath = os.path.join(currentPath, fyle)
            Log.LogMessage("Current filepath for said file = " + filepath)
            if (os.path.isdir(filepath)):
                self.LoadFilesb(os.listdir(filepath),
                                filepath,
                                currentName.join(fyle + "/"))
            else:
                extension = GetExtension(fyle)
                if (extension in self._loaders):
                    Loader = self._loaders[extension]
                    self._resources[currentName.join(fyle)] = Loader.Load(filepath)

                else:
                    Log.LogError("Unable to load resource of type " + extension + "!")

    def LoadFile(self, Absolutefilename):
        """This method takes a single file and loads it into the resource cache 
according to its extension"""        
        extension = GetExtension(Absolutefilename)
        if (extension in self._loaders):
            Loader = self._loaders[extension]
            self._resources[os.path.split(Absolutefilename)[1]] = Loader.Load(Absolutefilename)
        else:
            Log.LogError("Unable to load resource of type " + extension + "!")

    def PeekFile(self, itemname):
        """This method looks to see if a given resource is currently in the
cache"""
        return itemname in self._resources
        
                        

class Loader():
    #This is entirely meant to be subclassed and overridden
    def __init__(self):
        pass

    def Load(self, AbsoluteFilepath):
        return None

    def GetExtension(self):
        return ''
        
                                            
                                            
def GetExtension(filename):
    file, extension = os.path.splitext(filename)
    return extension


